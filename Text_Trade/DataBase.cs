//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Eric ToDo
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;

public class DataBase
{

    private const string CONNSTRING = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=C:\\Database\\TTDatabase.mdf;Integrated Security=True;Connect Timeout=30";

    public virtual Marketplace Marketplace
    {
        get;
        set;
    }

    public virtual WatchList WatchList
    {
        get;
        set;
    }

    public virtual SellList SellList
    {
        get;
        set;
    }

    public virtual TraderList UserList
    {
        get;
        set;
    }

    public virtual ListingList ListingList
    {
        get;
        set;
    }

    public string ConnString
	{
		get { return CONNSTRING; }
	}

	public virtual void Insert(string tableName, string fieldName, int pKey)
	{

        using (SqlConnection conn = new SqlConnection())
        {

            conn.ConnectionString = DataBase.CONNSTRING;
            conn.Open();

            string sql;
            sql = "INSERT FROM [" + tableName + "] WHERE [" + fieldName + "] = @id";

            SqlCommand command = new SqlCommand(sql, conn);
            command.Parameters.AddWithValue("id", pKey);

            command.ExecuteNonQuery();

        }

	}

	public virtual void Delete(string tableName, string fieldName, int pKey)
	{

        using (SqlConnection conn = new SqlConnection())
        {

            conn.ConnectionString = DataBase.CONNSTRING;
            conn.Open();

            String sql;
            sql = "UPDATE [" + tableName + "] SET deleted = 1 WHERE [" + fieldName + "] = @id";

            SqlCommand command = new SqlCommand(sql, conn);
            command.Parameters.AddWithValue("id", pKey);

            command.ExecuteNonQuery();

        }

    }


    public List<Listing> SearchFor(string fieldname = null, string field = null,string fieldname2 = null, string field2 = null)
    {

        List<Listing> listings = new List<Listing>();

        using (SqlConnection conn = new SqlConnection(CONNSTRING))
        {

            conn.Open();

            string sql;

            if (fieldname == null && field == null)
            {

                sql = "SELCT * FROM (Listings)";

            }

            else if (fieldname == null || field == null)
            {

                throw new ArgumentException("make sure fields are set");

            }

            else if (fieldname2 != null && field2 != null)
            {

                sql = "SELCT * FROM (Listings) WHERE @fieldname = @field and @fieldname2 = @field2";

            }

            else
            {

                sql = "SELCT * FROM (Listings) WHERE @fieldname = @field"; 

            }

            using (SqlCommand command = new SqlCommand(sql, conn))
            {

                command.Parameters.AddWithValue("fieldname", fieldname);
                command.Parameters.AddWithValue("field", field);

                if (fieldname2 != null && field2 != null)
                {

                    command.Parameters.AddWithValue("fieldname2", fieldname2);
                    command.Parameters.AddWithValue("field2", field2);

                }

                SqlDataReader reader = command.ExecuteReader();

                while (reader.Read())
                {

                    Listing templisting = new Listing();

                    templisting.Listing_id = reader.GetInt32(0);
                    templisting.Title = reader.GetString(1);
                    templisting.Author = reader.GetString(2);
                    templisting.Edition = reader.GetString(3);
                    templisting.Isbn = reader.GetString(4);
                    templisting.CourseCode = reader.GetString(5);
                    templisting.CourseLevel = reader.GetString(6);
                    templisting.LastUsed = reader.GetString(7);
                    Condition conditionstring = (Condition)Enum.Parse(typeof(Condition), reader.GetString(8));
                    templisting.Condition = conditionstring;
                    templisting.Description = reader.GetString(9);
                    templisting.Deleted = reader.GetInt32(10);
                    templisting.Price = reader.GetInt32(11);
                    templisting.Listinglife = reader.GetInt32(12);
                    templisting.Trader_id = reader.GetInt32(13);

                    listings.Add(templisting);

                }

            }

            

        }

        return listings;

    } 

}

